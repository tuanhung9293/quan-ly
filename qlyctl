#!/usr/bin/env python

import sys, getopt, os, platform, time
from subprocess import call, Popen, PIPE, STDOUT, check_output
from distutils.spawn import find_executable

def main(argv):
    methods = {
        'test': run_test,
        'build': run_build,
        'start': run_start,
        'stop': run_stop
    }

    if len(argv) == 0:
        print "Please...provide a valid option... run 'qlyctl help' for a list of available options"
        sys.exit(-1)

    if argv[0] not in methods:
        print "Please...provide a valid option... run 'qlyctl help' for a list of available options"
        sys.exit(-1)

    methods[argv[0]](argv[1:])

def run_start(args = []):
    def start_ui_dev():
        run_in_service_container('server', "npm run-script ui-dev")

    if 'ui-dev' in args:
        start_ui_dev()
    return

def run_stop(args = []):
    return

def run_build(args = []):
    return

def run_test(args = []):
    def clear_console():
        os.system('clear')

    def test_server():
        print "Running test on quanly-dev-server"
        run_in_service_container('server', "npm test")

    if '--keep' not in args:
        clear_console()

    # default always run test for server
    test_server()
    return

def locate_pod(service_name):
    return "quanly-dev-%s" % (service_name)

def copy_to_service_container(service_name, src, dst):
    pod = locate_pod(service_name);
    command = "docker cp %s %s:%s" % (src, pod, dst);
    os.system(command)

def run_in_service_container(service_name, command, returnOutput=False):
    pod = locate_pod(service_name);
    command = "docker exec -t %s %s" % (pod, command);
    if returnOutput:
        try:
            output = check_output(command, stderr=STDOUT, shell=True)
        except Exception as e:
            output = e.output
        return output
    print command

    os.system(command)

if __name__ == '__main__':
    main(sys.argv[1:])