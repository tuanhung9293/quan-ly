'use strict'

const Lab = require('lab')
const Code = require('code')
const Lodash = require('lodash')
const Async = require('async')
const seneca = require('../seneca')

const lab = exports.lab = Lab.script()
const expect = Code.expect
const describe = lab.describe
const before = lab.before
const after = lab.after
const it = lab.it

var rows = [
  { email: 'test0@gmail.com', name: 'test0', phone: '0901010100', address: '123 Penn.', status: 'active' },
  { email: 'test1@gmail.com', name: 'test1', phone: '0901010101', address: '123 Penn.', status: 'active' },
  { email: 'test2@gmail.com', name: 'test2', phone: '0901010102', address: '123 Penn.', status: 'active' },
  { email: 'test3@gmail.com', name: 'test3', phone: '0901010103', address: '123 Penn.', status: 'active' },
  { email: 'test4@gmail.com', name: 'test4', phone: '0901010104', address: '123 Penn.', status: 'active' },
  { email: 'test5@gmail.com', name: 'test5', phone: '0901010105', address: '123', status: 'inactive' },
  { email: 'test6@gmail.com', name: 'test6', phone: '0901010106', address: '123', status: 'inactive' },
  { email: 'test7@gmail.com', name: 'test7', phone: '0901010107', address: '123', status: 'inactive' },
  { email: 'test8@gmail.com', name: 'test8', phone: '0901010108', address: '123', status: 'inactive' },
  { email: 'test8@gmail.com', name: 'test9', phone: '0901010109', address: '123', status: 'inactive' }
]

describe('role:employee, cmd:find|get', function () {
  var data = []

  before(function (done) {
    Async.map(
      rows,
      function (item, returnMapItem) {
        seneca.act('role:employee, cmd:add', item, function (err, respond) {
            returnMapItem(null, respond.employee.data$())
        })
      },
      function (err, results) {
        data = results
        seneca.act('role:employee, cmd:delete', { id: data[8].id }, function (err, respond) {
          data[8] = respond.employee.data$()
          seneca.act('role:employee, cmd:delete', { id: data[9].id }, function (err, respond) {
            data[9] = respond.employee.data$()
          })
        })
        done()
      }
    ) 
  })

  after(function(done) {
    seneca.make$('company', 'employee').native$(function (err, db) {
      var collection = db.collection('company_employee');
      collection.drop()
      done()
    })
  })

  function find_employee(data, callback) {
    seneca.act('role:employee, cmd:find', data, callback)
  }

  function get_employees(data, callback) {
    seneca.act('role:employee, cmd:get', data, callback)
  }

  it('can find by single field', function (done) {
    find_employee({id: data[3].id}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employee.data$()).to.include(data[3])

      find_employee({name: data[6].name}, function(err, respond) {
        expect(err).not.exist()
        expect(respond.ok).to.be.true()
        expect(respond.employee.data$()).to.include(data[6])

        find_employee({phone: data[9].phone}, function(err, respond) {
          expect(err).not.exist()
          expect(respond.ok).to.be.true()
          expect(respond.employee.data$()).to.include(data[9])
          done()
        })
      })
    })
  })

  it('can find by some fields', function (done) {
    find_employee({id: data[2].id, name: data[2].name}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employee.data$()).to.include(data[2])
      done()
    })
  })

  it('can find by query', function (done) {
    find_employee({query: {name: data[4].name}}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employee.data$()).to.include(data[4])
      done()
    })
  })

  it('can find with no result', function (done) {
    find_employee({id: data[1].id, name: data[2].name}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employee).to.not.exist()
      done()
    })
  })

  it('just returns one and only one entity', function (done) {
    find_employee({status: data[8].status}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      if (respond.employee.id == data[8].id) {
        expect(respond.employee.data$()).to.include(data[8])
      } else {
        expect(respond.employee.data$()).to.include(data[9])
      }
      done()
    })
  })

  // -----------------------------------------------------------
  it('can get by single field', function (done) {
    get_employees({address: data[1].address}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employees.length).to.equal(5)

      get_employees({status: data[5].status}, function(err, respond) {
        expect(err).not.exist()
        expect(respond.ok).to.be.true()
        expect(respond.employees.length).to.equal(3)

        get_employees({status: data[9].status}, function(err, respond) {
          expect(err).not.exist()
          expect(respond.ok).to.be.true()
          expect(respond.employees.length).to.equal(2)
          done()
        })
      })
    })
  })

  it('can find by query use sort$', function (done) {
    get_employees({query: {status: 'deleted', sort$: {name: -1}}}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employees[0].data$()).to.include(data[9])
      expect(respond.employees[1].data$()).to.include(data[8])
      done()
    })
  })

  it('can find by query use sort$ and limit$', function (done) {
    get_employees({query: {status: 'active', sort$: {name: -1}, limit$: 2}}, function(err, respond) {
      expect(err).not.exist()
      expect(respond.ok).to.be.true()
      expect(respond.employees[0].data$()).to.include(data[4])
      expect(respond.employees[1].data$()).to.include(data[3])
      done()
    })
  })
  // TODO: write case by use `native` function in entity
})
